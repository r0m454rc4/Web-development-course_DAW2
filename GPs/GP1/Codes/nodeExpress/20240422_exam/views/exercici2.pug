doctype html
html(lang="ca")
  head
    title= title
    meta(charset="utf-8")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/css/ol.css", type="text/css")
    link(rel="stylesheet", href="./style.css")
    script(src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/build/ol.js")
    style(type="text/css").
      html {
          height: 100%;
      }
      body {
          height: 50%;
          margin: 0;
          padding: 0;
      }
      #mapa {
          height: 400px;
          width: 100%;
      }
  body
    h1= title
    #mapa(style="width:100%; height:100%")
    script(type="text/javascript").
      const onSuccess = function(position) {
        //- Here I define a style of the circumference that shows the current position.
        var style = new ol.style.Style({
          image: new ol.style.Circle({
            radius: 10,
            snapToPixel: false,
            fill: new ol.style.Fill({color: 'black'}),
            stroke: new ol.style.Stroke({
              color: 'white', width: 5
            })
          })
        });

        const pos = new ol.View({
          center: ol.proj.fromLonLat([position.coords.longitude, position.coords.latitude]),
          zoom: 2
        });

        const pos1 = new ol.View({
          center: ol.proj.fromLonLat([-74.0059731, 40.7143528]),
          zoom: 2
        });
        
        const map = new ol.Map({
          layers: [
            new ol.layer.Tile({
              source: new ol.source.OSM(),
            }),
          ],
          target: "mapa",
          controls: ol.control.defaults({
            attributionOptions: {
              collapsible: false,
            },
          }),

          view: pos1
        });

        // Add a vector layer and a point feature to represent the user's position.
        const vectorLayer = new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [
              new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat([position.coords.longitude, position.coords.latitude]))
              }),   
            ]
          })
        });

        const vectorLayer1 = new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [
              new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat([-74.0059731, 40.7143528]))
              }),   
            ]
          })
        });

        vectorLayer.setStyle(style);
        vectorLayer1.setStyle(style);

        map.addLayer(vectorLayer);
        map.addLayer(vectorLayer1);

        function aRadians(graus) {
          return graus * (Math.PI / 180);
        }

        function distancia(latitud1, longitud1, latitud2, longitud2) {
          // R radi en km de la terra.
          var R = 6371;
          var deltaLatitud = aRadians(latitud2 - latitud1);
          var deltaLongitud = aRadians(longitud2 - longitud1);

          latitud1 = aRadians(latitud1); // Conversio de graus a RAD.
          latitud2 = aRadians(latitud2);

          var a =
            Math.sin(deltaLatitud / 2) * Math.sin(deltaLatitud / 2) +
            Math.cos(latitud1) *
              Math.cos(latitud2) *
              Math.sin(deltaLongitud / 2) *
              Math.sin(deltaLongitud / 2);

          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          var d = R * c;

          return d;
        }

        alert(distancia(position.coords.latitude, position.coords.longitude, 40.7143528, -74.0059731))
      };
      
      const onError = function(error) {
        console.error('Error occurred while retrieving geolocation:', error);
      };
      
      navigator.geolocation.getCurrentPosition(onSuccess, onError);
  br
  a(href='./index') Anar a index.